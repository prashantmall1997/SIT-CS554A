const express = require("express");
const router = express.Router();

const data = require("../data");
const tvMazeApiData = data.tvMazeApiData;

const bluebird = require("bluebird");
const redis = require("redis");
const client = redis.createClient();

bluebird.promisifyAll(redis.RedisClient.prototype);
bluebird.promisifyAll(redis.Multi.prototype);

// GET '/portfolio'
router.get("/", async (req, res) => {
  try {
    const shows = await tvMazeApiData.getAllShows();
    res.render(
      "shows",
      {
        shows: shows,
        title: "All Shows",
      },
      async (err, html) => {
        await client.setAsync("homePage", html);
        res.send(html);
      }
    );
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).render("error", {
        errorCode: e.status,
        errorMessage: e.error,
        title: "ERROR",
      });
    } else {
      res.status(500).render("error", {
        errorCode: 500,
        errorMessage: "Data cannot be retrived!",
        title: "ERROR",
      });
    }
  }
});

router.get("/show/:id", async (req, res) => {
  try {
    var id = req.params.id;

    if (id === undefined) {
      throw {
        status: 400,
        error: "ID parameter not passed - Generated by '/routes/tvMazeApi.js'.",
      };
    }

    if (typeof id != "string") {
      throw {
        status: 400,
        error:
          "ID paramenter must be passed in string format from URL - Generated by '/routes/tvMazeApi.js'.",
      };
    }

    if (id.trim() === "") {
      throw {
        status: 400,
        error:
          "ID paramenter cannot be empty spaces - Generated by '/routes/tvMazeApi.js'.",
      };
    }
    if (isNaN(id * 1)) {
      throw {
        status: 400,
        error:
          "ID paramenter must be a positive whole number, not letters or symbols - Generated by '/routes/tvMazeApi.js'.",
      };
    }
    if (id * 1 <= 0) {
      throw {
        status: 400,
        error:
          "ID paramenter must be a positive whole number, not zero or negatives - Generated by '/routes/tvMazeApi.js'.",
      };
    }

    if ((id * 1) % 1 > 0) {
      throw {
        status: 400,
        error:
          "ID paramenter must be a positive whole number, not decimals - Generated by '/routes/tvMazeApi.js'.",
      };
    }
  } catch (e) {
    res.status(e.status).render("error", {
      errorCode: e.status,
      errorMessage: e.error,
      title: "ERROR",
    });
    return;
  }

  try {
    const show = await tvMazeApiData.getShowById(req.params.id);
    res.render(
      "showFoundById",
      {
        show: show,
        title: "SHOW",
      },
      async (err, html) => {
        await client.setAsync(`show_${req.params.id}`, html);
        res.send(html);
      }
    );
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).render("error", {
        errorCode: e.status,
        errorMessage: e.error,
        title: "tvMazeApi",
      });
    } else {
      res.status(404).render("error", {
        errorCode: 404,
        errorMessage: "No show found with the provided ID!",
        title: "ERROR",
      });
    }
  }
});

router.post("/search", async (req, res) => {
  try {
    if (req.body.searchTerm === undefined) {
      throw {
        status: 400,
        error: "Search term not passed - Generated by '/routes/tvMazeApi.js'.",
      };
    }

    if (typeof req.body.searchTerm != "string") {
      throw {
        status: 400,
        error:
          "Search term must be passed in string format from search box in homepage - Generated by '/routes/tvMazeApi.js'.",
      };
    }

    if (req.body.searchTerm.trim() === "") {
      throw {
        status: 400,
        error:
          "Search term cannot be empty string or just blank spaces - Generated by '/routes/tvMazeApi.js'.",
      };
    }
  } catch (e) {
    res.status(e.status).render("error", {
      errorCode: e.status,
      errorMessage: e.error,
      title: "ERROR",
    });
    return;
  }

  try {
    const searchTerm = req.body.searchTerm;
    const shows = await tvMazeApiData.getShowByName(searchTerm);
    if (shows.length === 0 || shows == undefined) {
      res.render(
        "showNotFound",
        {
          searchTerm: searchTerm,
          title: "Not Found",
        },
        async (err, html) => {
          await client.zaddAsync("searchResults", 1, req.body.searchTerm);
          await client.setAsync(req.body.searchTerm, html);
          res.send(html);
        }
      );
    } else {
      res.render(
        "searchShows",
        {
          shows: shows,
          title: "Shows Found",
        },
        async (err, html) => {
          await client.zaddAsync("searchResults", 1, req.body.searchTerm);
          await client.setAsync(req.body.searchTerm, html);
          res.send(html);
        }
      );
    }
  } catch (e) {
    console.log(e);
    if (e.status && e.error) {
      res.status(e.status).render("error", {
        errorCode: e.status,
        errorMessage: e.error,
        title: "ERROR",
      });
    } else {
      res.status(500).render("error", {
        errorCode: 500,
        errorMessage: "Show cannot be retrived from axios call!",
        title: "ERROR",
      });
    }
  }
});

router.get("/popularsearches", async (req, res) => {
  try {
    let topSearchesResult = await client.zrevrangeAsync("searchResults", 0, 9);

    if (topSearchesResult.length === 0) {
      topSearchesResult.push("No searches have been performed yet!");
      res.render("topSearches", {
        topSearchesResult: topSearchesResult,
        title: "TOP SEARCH",
      });
      return;
    }

    res.render("topSearches", {
      topSearchesResult: topSearchesResult,
    });
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).render("error", {
        errorCode: e.status,
        errorMessage: e.error,
        title: "ERROR",
      });
    } else {
      res.status(500).render("error", {
        errorCode: 500,
        errorMessage: "Can't look for top results!",
        title: "ERROR",
      });
    }
  }
});

module.exports = router;
