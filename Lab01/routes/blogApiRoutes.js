const express = require("express");
const bcrypt = require("bcrypt");
var ObjectID = require("mongodb").ObjectId;
const router = express.Router();
const saltRounds = 15;

const data = require("../data");
const session = require("express-session");
const blogApiData = data.blogApiData;
const userData = data.userData;

async function idFormatChecker(id) {
  if (id === undefined) {
    throw {
      status: 400,
      error:
        "ID parameter not passed - Generated by '/routes/blogApiRoutes.js'.",
    };
  }

  if (typeof id != "string") {
    throw {
      status: 400,
      error:
        "ID paramenter must be passed in string format from URL - Generated by '/routes/blogApiRoutes.js'.",
    };
  }

  if (!ObjectID.isValid(id)) {
    throw {
      status: 400,
      error:
        "ID paramenter passed in string format from URL is not a valid ObjectID - Generated by '/routes/blogApiRoutes.js'.",
    };
  }
}

// GET '/blog'
router.get("/blog", async (req, res) => {
  const skip = req.query.skip || null;
  const take = req.query.take || null;

  try {
    if (
      (parseInt(skip) === NaN || parseInt(skip).toString() !== skip) &&
      skip !== null
    ) {
      throw {
        status: 400,
        error:
          "Skip should be an integer - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (parseInt(skip) <= 0) {
      throw {
        status: 400,
        error:
          "Skip should be a positive integer - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (
      (parseInt(take) === NaN || parseInt(take).toString() !== take) &&
      take !== null
    ) {
      throw {
        status: 400,
        error:
          "Take should be an integer - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (parseInt(take) <= 0) {
      throw {
        status: 400,
        error:
          "Take should be a positive integer - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
  } catch (e) {
    res.status(e.status).send({ error: e.error });
    return;
  }

  try {
    const blogs = await blogApiData.getBlogs(skip, take);
    res.send(blogs);
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).send({ error: e.error });
    } else {
      res.status(500).send({ e });
    }
  }
});

// POST '/blog/signup'
router.post("/blog/signup", async (req, res) => {
  const user = req.body;

  try {
    if (!user.name || !user.username || !user.password) {
      throw {
        status: 401,
        error:
          "Name, Username & Password must be provided! - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (typeof user.name != "string") {
      throw {
        status: 400,
        error:
          "User's name must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
    if (user.name.trim() === "") {
      throw {
        status: 400,
        error:
          "User's name cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (typeof user.username != "string") {
      throw {
        status: 400,
        error:
          "User's username must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
    if (user.username.trim() === "") {
      throw {
        status: 400,
        error:
          "User's username cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (typeof user.password != "string") {
      throw {
        status: 400,
        error:
          "User's password must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
    if (user.password.trim() === "") {
      throw {
        status: 400,
        error:
          "User's password cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
  } catch (e) {
    res.status(e.status).send({ error: e.error });
    return;
  }

  user.username = user.username.toLowerCase();

  try {
    user.password = await bcrypt.hash(user.password, saltRounds);
    const useradded = await userData.signup(user);

    if (useradded === "usernameNotAvailable") {
      res.json({
        error:
          "Username not avaialble, please try agian with a different username!",
      });
    } else if (useradded.acknowledged === true) {
      res.json({ message: "User successfully signed up" });
    }
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).send({ error: e.error });
    } else {
      res.status(500).send({ e });
    }
  }
});

// POST '/blog/login'
router.post("/blog/login", async (req, res) => {
  const user = req.body;

  try {
    if (!user.username || !user.password) {
      throw {
        status: 401,
        error:
          "Name, Username & Password must be provided! - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (typeof user.username != "string") {
      throw {
        status: 400,
        error:
          "User's username must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
    if (user.username.trim() === "") {
      throw {
        status: 400,
        error:
          "User's username cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (typeof user.password != "string") {
      throw {
        status: 400,
        error:
          "User's password must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
    if (user.password.trim() === "") {
      throw {
        status: 400,
        error:
          "User's password cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
  } catch (e) {
    res.status(e.status).send({ error: e.error });
    return;
  }

  user.username = user.username.toLowerCase();

  try {
    const userLoggedIn = await userData.login(user);

    if (userLoggedIn === "userDoesNotExist" || userLoggedIn === "fail") {
      res.json({
        error: "Wrong username or password!",
      });
    } else if (userLoggedIn[0] === "success") {
      req.session.user = {
        userAuthenticated: true,
        username: user.username,
        _id: userLoggedIn[1],
      };
      res.send({ message: "User successfully logged in" });
    }
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).send({ error: e.error });
    } else {
      res.status(500).send({ e });
    }
  }
});

// GET '/blog/logout'
router.get("/blog/logout", async (req, res) => {
  req.session.destroy();
  res.send({ message: "User successfully logged out!" });
});

//POST '/blog'
router.post("/blog", async (req, res) => {
  const title = req.body.title;
  const body = req.body.body;

  try {
    if (!title || title === undefined || !body || body === undefined) {
      throw {
        status: 400,
        error:
          "Must provide blog title and body - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (typeof title != "string") {
      throw {
        status: 400,
        error:
          "Blog title must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
    if (title.trim() === "") {
      throw {
        status: 400,
        error:
          "Blog title cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (typeof body != "string") {
      throw {
        status: 400,
        error:
          "Blog body must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
    if (body.trim() === "") {
      throw {
        status: 400,
        error:
          "Blog body cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
  } catch (e) {
    res.status(e.status).send({ error: e.error });
    return;
  }

  try {
    if (!req.session.user) {
      res.send({ message: "Please login to post a blog!" });
    } else {
      const blog = await blogApiData.postBlog(title, body, req.session.user);
      res.send(blog);
    }
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).send({ error: e.error });
    } else {
      res.status(500).send({ e });
    }
  }
});

//PUT /blog/:id
router.put("/blog/:id", async (req, res) => {
  const title = req.body.title;
  const body = req.body.body;

  try {
    await idFormatChecker(req.params.id);

    if (!title || title === undefined || !body || body === undefined) {
      throw {
        status: 400,
        error:
          "Must provide blog title and body - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (typeof title != "string") {
      throw {
        status: 400,
        error:
          "Blog title must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
    if (title.trim() === "") {
      throw {
        status: 400,
        error:
          "Blog title cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (typeof body != "string") {
      throw {
        status: 400,
        error:
          "Blog body must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
    if (body.trim() === "") {
      throw {
        status: 400,
        error:
          "Blog body cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
  } catch (e) {
    res.status(e.status).send({ error: e.error });
    return;
  }

  try {
    if (!req.session.user) {
      res.send({ message: "Please login to update your posted blog!" });
    } else {
      const blog = await blogApiData.getBlogById(req.params.id);
      if (
        JSON.stringify(blog.userThatPosted._id) ===
        JSON.stringify(req.session.user._id)
      ) {
        const updatedPutBlog = await blogApiData.updateBlog(
          title,
          body,
          req.params.id
        );
        res.send(updatedPutBlog);
      } else {
        throw {
          status: 401,
          error:
            "You cannot update blog posted by other users! - Generated by '/routes/blogApiRoutes.js'.",
        };
      }
    }
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).send({ error: e.error });
    } else {
      res.status(500).send({ e });
    }
  }
});

//PATCH /blog/:id
router.patch("/blog/:id", async (req, res) => {
  const title = req.body.title;
  const body = req.body.body;

  try {
    await idFormatChecker(req.params.id);

    if ((!title || title === undefined) && (!body || body === undefined)) {
      throw {
        status: 400,
        error:
          "Must provide either blog title or blog body - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (title && title != undefined) {
      if (typeof title != "string") {
        throw {
          status: 400,
          error:
            "Blog title must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
        };
      }
      if (title.trim() === "") {
        throw {
          status: 400,
          error:
            "Blog title cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
        };
      }
    }

    if (body && body != undefined) {
      if (typeof body != "string") {
        throw {
          status: 400,
          error:
            "Blog body must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
        };
      }
      if (body.trim() === "") {
        throw {
          status: 400,
          error:
            "Blog body cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
        };
      }
    }
  } catch (e) {
    res.status(e.status).send({ error: e.error });
    return;
  }

  try {
    if (!req.session.user) {
      res.send({ message: "Please login to update your posted blog!" });
    } else {
      const blog = await blogApiData.getBlogById(req.params.id);

      if (
        JSON.stringify(blog.userThatPosted._id) ===
        JSON.stringify(req.session.user._id)
      ) {
        const patchBlog = await blogApiData.patchBlog(
          title,
          body,
          req.params.id
        );
        res.send(patchBlog);
      } else {
        throw {
          status: 401,
          error:
            "You cannot update blog posted by other users! - Generated by '/routes/blogApiRoutes.js'.",
        };
      }
    }
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).send({ error: e.error });
    } else {
      res.status(500).send({ e });
    }
  }
});

//GET /blog/:id
router.get("/blog/:id", async (req, res) => {
  try {
    await idFormatChecker(req.params.id);
  } catch (e) {
    res.status(e.status).send({ error: e.error });
    return;
  }

  try {
    const blog = await blogApiData.getBlogById(req.params.id);
    res.send(blog);
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).send({ error: e.error });
    } else {
      res.status(500).send({ e });
    }
  }
});

//POST /blog/:id/comments
router.post("/blog/:id/comments", async (req, res) => {
  const comment = req.body.comment;
  try {
    await idFormatChecker(req.params.id);

    if (!comment || comment === undefined) {
      throw {
        status: 400,
        error:
          "Must provide comment - Generated by '/routes/blogApiRoutes.js'.",
      };
    }

    if (typeof comment != "string") {
      throw {
        status: 400,
        error:
          "Blog comment must be provided in string format - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
    if (comment.trim() === "") {
      throw {
        status: 400,
        error:
          "Blog comment cannot be empty string or just blank spaces - Generated by '/routes/blogApiRoutes.js'.",
      };
    }
  } catch (e) {
    res.status(e.status).send({ error: e.error });
    return;
  }

  try {
    if (!req.session.user) {
      res.send({ message: "Please login to comment!" });
    } else {
      await blogApiData.getBlogById(req.params.id);

      const commentPosted = await blogApiData.postComment(
        req.params.id,
        comment,
        req.session.user
      );

      res.send(commentPosted);
    }
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).send({ error: e.error });
    } else {
      res.status(500).send({ e });
    }
  }
});

//DELETE /blog/:blogId/:commentId
router.delete("/blog/:blogId/:commentId", async (req, res) => {
  const blogID = req.params.blogId;
  const commentID = req.params.commentId;

  try {
    await idFormatChecker(blogID);
    await idFormatChecker(commentID);
  } catch (e) {
    res.status(e.status).send({ error: e.error });
    return;
  }

  try {
    if (!req.session.user) {
      res.send({ message: "Please login to delete your comment!" });
    } else {
      const blog = await blogApiData.getBlogById(blogID);
      var commentFound = false;
      for (var i = 0; i < blog.comments.length; i++) {
        var postCommentID = blog.comments[i]._id;
        if (JSON.stringify(postCommentID) === JSON.stringify(commentID)) {
          commentFound = true;
          var userPosted = blog.comments[i].userThatPostedComment._id;
          if (
            JSON.stringify(userPosted) !== JSON.stringify(req.session.user._id)
          ) {
            throw {
              status: 401,
              error:
                "You cannot update blog posted by other users! - Generated by '/routes/blogApiRoutes.js'.",
            };
          }
        }
      }

      if (commentFound === false) {
        throw {
          status: 401,
          error:
            "Comment not found! - Generated by '/routes/blogApiRoutes.js'.",
        };
      } else {
        const deleted = await blogApiData.deleteComment(blogID, commentID);
        res.send(deleted);
      }
    }
  } catch (e) {
    if (e.status && e.error) {
      res.status(e.status).send({ error: e.error });
    } else {
      res.status(500).send({ e });
    }
  }
});

module.exports = router;
